"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.strip = strip;

function _createForOfIteratorHelperLoose(o) {
  var i = 0;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  i = o[Symbol.iterator]();
  return i.next.bind(i);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function strip(strings) {
  var out = '';

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  for (var i = 0; i < strings.length; i++) {
    var string = strings[i];
    var dynamic = args[i] !== undefined ? String(args[i]) : '';
    out += "" + string + dynamic;
  }

  var lines = out.split('\n');

  while (lines.length && lines[0].match(/^\s*$/)) {
    lines.shift();
  }

  while (lines.length && lines[lines.length - 1].match(/^\s*$/)) {
    lines.pop();
  }

  var min = Infinity;

  for (var _iterator = _createForOfIteratorHelperLoose(lines), _step; !(_step = _iterator()).done;) {
    var line = _step.value;
    var leading = line.match(/^\s*/)[0].length;
    min = Math.min(min, leading);
  }

  var stripped = [];

  for (var _iterator2 = _createForOfIteratorHelperLoose(lines), _step2; !(_step2 = _iterator2()).done;) {
    var _line = _step2.value;
    stripped.push(_line.slice(min));
  }

  return stripped.join('\n');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL3N0cmluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU0sU0FBQSxLQUFBLENBQUEsT0FBQSxFQUFpRTtBQUNyRSxNQUFJLEdBQUcsR0FBUCxFQUFBOztBQURxRSxPQUFBLElBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQWpFLElBQWlFLEdBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQTtBQUFqRSxJQUFBLElBQWlFLENBQUEsSUFBQSxHQUFBLENBQUEsQ0FBakUsR0FBaUUsU0FBQSxDQUFBLElBQUEsQ0FBakU7QUFBaUU7O0FBRXJFLE9BQUssSUFBSSxDQUFDLEdBQVYsQ0FBQSxFQUFnQixDQUFDLEdBQUcsT0FBTyxDQUEzQixNQUFBLEVBQW9DLENBQXBDLEVBQUEsRUFBeUM7QUFDdkMsUUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFwQixDQUFvQixDQUFwQjtBQUNBLFFBQUksT0FBTyxHQUFHLElBQUksQ0FBSixDQUFJLENBQUosS0FBQSxTQUFBLEdBQXdCLE1BQU0sQ0FBQyxJQUFJLENBQW5DLENBQW1DLENBQUwsQ0FBOUIsR0FBZCxFQUFBO0FBRUEsSUFBQSxHQUFHLElBQUEsS0FBQSxNQUFBLEdBQUgsT0FBQTtBQUNEOztBQUVELE1BQUksS0FBSyxHQUFHLEdBQUcsQ0FBSCxLQUFBLENBQVosSUFBWSxDQUFaOztBQUVBLFNBQU8sS0FBSyxDQUFMLE1BQUEsSUFBZ0IsS0FBSyxDQUFMLENBQUssQ0FBTCxDQUFBLEtBQUEsQ0FBdkIsT0FBdUIsQ0FBdkIsRUFBZ0Q7QUFDOUMsSUFBQSxLQUFLLENBQUwsS0FBQTtBQUNEOztBQUVELFNBQU8sS0FBSyxDQUFMLE1BQUEsSUFBZ0IsS0FBSyxDQUFDLEtBQUssQ0FBTCxNQUFBLEdBQU4sQ0FBSyxDQUFMLENBQUEsS0FBQSxDQUF2QixPQUF1QixDQUF2QixFQUErRDtBQUM3RCxJQUFBLEtBQUssQ0FBTCxHQUFBO0FBQ0Q7O0FBRUQsTUFBSSxHQUFHLEdBQVAsUUFBQTs7QUFFQSxPQUFBLElBQUEsU0FBQSxHQUFBLCtCQUFBLENBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsQ0FBQSxLQUFBLEdBQUEsU0FBQSxFQUFBLEVBQUEsSUFBQSxHQUF3QjtBQUFBLFFBQXhCLElBQXdCLEdBQUEsS0FBQSxDQUFBLEtBQUE7QUFDdEIsUUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFKLEtBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxFQUFkLE1BQUE7QUFFQSxJQUFBLEdBQUcsR0FBRyxJQUFJLENBQUosR0FBQSxDQUFBLEdBQUEsRUFBTixPQUFNLENBQU47QUFDRDs7QUFFRCxNQUFJLFFBQVEsR0FBWixFQUFBOztBQUVBLE9BQUEsSUFBQSxVQUFBLEdBQUEsK0JBQUEsQ0FBQSxLQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsQ0FBQSxDQUFBLE1BQUEsR0FBQSxVQUFBLEVBQUEsRUFBQSxJQUFBLEdBQXdCO0FBQUEsUUFBeEIsS0FBd0IsR0FBQSxNQUFBLENBQUEsS0FBQTtBQUN0QixJQUFBLFFBQVEsQ0FBUixJQUFBLENBQWMsS0FBSSxDQUFKLEtBQUEsQ0FBZCxHQUFjLENBQWQ7QUFDRDs7QUFFRCxTQUFPLFFBQVEsQ0FBUixJQUFBLENBQVAsSUFBTyxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gc3RyaXAoc3RyaW5nczogVGVtcGxhdGVTdHJpbmdzQXJyYXksIC4uLmFyZ3M6IHVua25vd25bXSkge1xuICBsZXQgb3V0ID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5ncy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBzdHJpbmcgPSBzdHJpbmdzW2ldO1xuICAgIGxldCBkeW5hbWljID0gYXJnc1tpXSAhPT0gdW5kZWZpbmVkID8gU3RyaW5nKGFyZ3NbaV0pIDogJyc7XG5cbiAgICBvdXQgKz0gYCR7c3RyaW5nfSR7ZHluYW1pY31gO1xuICB9XG5cbiAgbGV0IGxpbmVzID0gb3V0LnNwbGl0KCdcXG4nKTtcblxuICB3aGlsZSAobGluZXMubGVuZ3RoICYmIGxpbmVzWzBdLm1hdGNoKC9eXFxzKiQvKSkge1xuICAgIGxpbmVzLnNoaWZ0KCk7XG4gIH1cblxuICB3aGlsZSAobGluZXMubGVuZ3RoICYmIGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdLm1hdGNoKC9eXFxzKiQvKSkge1xuICAgIGxpbmVzLnBvcCgpO1xuICB9XG5cbiAgbGV0IG1pbiA9IEluZmluaXR5O1xuXG4gIGZvciAobGV0IGxpbmUgb2YgbGluZXMpIHtcbiAgICBsZXQgbGVhZGluZyA9IGxpbmUubWF0Y2goL15cXHMqLykhWzBdLmxlbmd0aDtcblxuICAgIG1pbiA9IE1hdGgubWluKG1pbiwgbGVhZGluZyk7XG4gIH1cblxuICBsZXQgc3RyaXBwZWQgPSBbXTtcblxuICBmb3IgKGxldCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgc3RyaXBwZWQucHVzaChsaW5lLnNsaWNlKG1pbikpO1xuICB9XG5cbiAgcmV0dXJuIHN0cmlwcGVkLmpvaW4oJ1xcbicpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==