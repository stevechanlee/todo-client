"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EMPTY_SLICE = exports.ListSlice = exports.LinkedList = exports.ListNode = void 0;

class ListNode {
  constructor(value) {
    this.next = null;
    this.prev = null;
    this.value = value;
  }

}

exports.ListNode = ListNode;

class LinkedList {
  constructor() {
    this.clear();
  }

  head() {
    return this._head;
  }

  tail() {
    return this._tail;
  }

  clear() {
    this._head = this._tail = null;
  }

  toArray() {
    let out = [];
    this.forEachNode(n => out.push(n));
    return out;
  }

  nextNode(node) {
    return node.next;
  }

  forEachNode(callback) {
    let node = this._head;

    while (node !== null) {
      callback(node);
      node = node.next;
    }
  }

  insertBefore(node, reference = null) {
    if (reference === null) return this.append(node);
    if (reference.prev) reference.prev.next = node;else this._head = node;
    node.prev = reference.prev;
    node.next = reference;
    reference.prev = node;
    return node;
  }

  append(node) {
    let tail = this._tail;

    if (tail) {
      tail.next = node;
      node.prev = tail;
      node.next = null;
    } else {
      this._head = node;
    }

    return this._tail = node;
  }

  remove(node) {
    if (node.prev) node.prev.next = node.next;else this._head = node.next;
    if (node.next) node.next.prev = node.prev;else this._tail = node.prev;
    return node;
  }

}

exports.LinkedList = LinkedList;

class ListSlice {
  constructor(head, tail) {
    this._head = head;
    this._tail = tail;
  }

  forEachNode(callback) {
    let node = this._head;

    while (node !== null) {
      callback(node);
      node = this.nextNode(node);
    }
  }

  head() {
    return this._head;
  }

  tail() {
    return this._tail;
  }

  toArray() {
    let out = [];
    this.forEachNode(n => out.push(n));
    return out;
  }

  nextNode(node) {
    if (node === this._tail) return null;
    return node.next;
  }

}

exports.ListSlice = ListSlice;
const EMPTY_SLICE = new ListSlice(null, null);
exports.EMPTY_SLICE = EMPTY_SLICE;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL2xpc3QtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9NLE1BQUEsUUFBQSxDQUFlO0FBS25CLEVBQUEsV0FBQSxDQUFBLEtBQUEsRUFBb0I7QUFKYixTQUFBLElBQUEsR0FBQSxJQUFBO0FBQ0EsU0FBQSxJQUFBLEdBQUEsSUFBQTtBQUlMLFNBQUEsS0FBQSxHQUFBLEtBQUE7QUFDRDs7QUFQa0I7Ozs7QUFjZixNQUFBLFVBQUEsQ0FBaUI7QUFJckIsRUFBQSxXQUFBLEdBQUE7QUFDRSxTQUFBLEtBQUE7QUFDRDs7QUFFRCxFQUFBLElBQUksR0FBQTtBQUNGLFdBQU8sS0FBUCxLQUFBO0FBQ0Q7O0FBRUQsRUFBQSxJQUFJLEdBQUE7QUFDRixXQUFPLEtBQVAsS0FBQTtBQUNEOztBQUVELEVBQUEsS0FBSyxHQUFBO0FBQ0gsU0FBQSxLQUFBLEdBQWEsS0FBQSxLQUFBLEdBQWIsSUFBQTtBQUNEOztBQUVELEVBQUEsT0FBTyxHQUFBO0FBQ0wsUUFBSSxHQUFHLEdBQVAsRUFBQTtBQUNBLFNBQUEsV0FBQSxDQUFpQixDQUFDLElBQUksR0FBRyxDQUFILElBQUEsQ0FBdEIsQ0FBc0IsQ0FBdEI7QUFDQSxXQUFBLEdBQUE7QUFDRDs7QUFFRCxFQUFBLFFBQVEsQ0FBQSxJQUFBLEVBQVE7QUFDZCxXQUFPLElBQUksQ0FBWCxJQUFBO0FBQ0Q7O0FBRUQsRUFBQSxXQUFXLENBQUEsUUFBQSxFQUE0QjtBQUNyQyxRQUFJLElBQUksR0FBRyxLQUFYLEtBQUE7O0FBRUEsV0FBTyxJQUFJLEtBQVgsSUFBQSxFQUFzQjtBQUNwQixNQUFBLFFBQVEsQ0FBUixJQUFRLENBQVI7QUFDQSxNQUFBLElBQUksR0FBRyxJQUFJLENBQVgsSUFBQTtBQUNEO0FBQ0Y7O0FBRUQsRUFBQSxZQUFZLENBQUEsSUFBQSxFQUFVLFNBQUEsR0FBVixJQUFBLEVBQXFDO0FBQy9DLFFBQUksU0FBUyxLQUFiLElBQUEsRUFBd0IsT0FBTyxLQUFBLE1BQUEsQ0FBUCxJQUFPLENBQVA7QUFFeEIsUUFBSSxTQUFTLENBQWIsSUFBQSxFQUFvQixTQUFTLENBQVQsSUFBQSxDQUFBLElBQUEsR0FBcEIsSUFBb0IsQ0FBcEIsS0FDSyxLQUFBLEtBQUEsR0FBQSxJQUFBO0FBRUwsSUFBQSxJQUFJLENBQUosSUFBQSxHQUFZLFNBQVMsQ0FBckIsSUFBQTtBQUNBLElBQUEsSUFBSSxDQUFKLElBQUEsR0FBQSxTQUFBO0FBQ0EsSUFBQSxTQUFTLENBQVQsSUFBQSxHQUFBLElBQUE7QUFFQSxXQUFBLElBQUE7QUFDRDs7QUFFRCxFQUFBLE1BQU0sQ0FBQSxJQUFBLEVBQVE7QUFDWixRQUFJLElBQUksR0FBRyxLQUFYLEtBQUE7O0FBRUEsUUFBQSxJQUFBLEVBQVU7QUFDUixNQUFBLElBQUksQ0FBSixJQUFBLEdBQUEsSUFBQTtBQUNBLE1BQUEsSUFBSSxDQUFKLElBQUEsR0FBQSxJQUFBO0FBQ0EsTUFBQSxJQUFJLENBQUosSUFBQSxHQUFBLElBQUE7QUFIRixLQUFBLE1BSU87QUFDTCxXQUFBLEtBQUEsR0FBQSxJQUFBO0FBQ0Q7O0FBRUQsV0FBUSxLQUFBLEtBQUEsR0FBUixJQUFBO0FBQ0Q7O0FBRUQsRUFBQSxNQUFNLENBQUEsSUFBQSxFQUFRO0FBQ1osUUFBSSxJQUFJLENBQVIsSUFBQSxFQUFlLElBQUksQ0FBSixJQUFBLENBQUEsSUFBQSxHQUFpQixJQUFJLENBQXBDLElBQWUsQ0FBZixLQUNLLEtBQUEsS0FBQSxHQUFhLElBQUksQ0FBakIsSUFBQTtBQUVMLFFBQUksSUFBSSxDQUFSLElBQUEsRUFBZSxJQUFJLENBQUosSUFBQSxDQUFBLElBQUEsR0FBaUIsSUFBSSxDQUFwQyxJQUFlLENBQWYsS0FDSyxLQUFBLEtBQUEsR0FBYSxJQUFJLENBQWpCLElBQUE7QUFFTCxXQUFBLElBQUE7QUFDRDs7QUExRW9COzs7O0FBeUZqQixNQUFBLFNBQUEsQ0FBZ0I7QUFJcEIsRUFBQSxXQUFBLENBQUEsSUFBQSxFQUFBLElBQUEsRUFBNEM7QUFDMUMsU0FBQSxLQUFBLEdBQUEsSUFBQTtBQUNBLFNBQUEsS0FBQSxHQUFBLElBQUE7QUFDRDs7QUFFRCxFQUFBLFdBQVcsQ0FBQSxRQUFBLEVBQTRCO0FBQ3JDLFFBQUksSUFBSSxHQUFHLEtBQVgsS0FBQTs7QUFFQSxXQUFPLElBQUksS0FBWCxJQUFBLEVBQXNCO0FBQ3BCLE1BQUEsUUFBUSxDQUFSLElBQVEsQ0FBUjtBQUNBLE1BQUEsSUFBSSxHQUFHLEtBQUEsUUFBQSxDQUFQLElBQU8sQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsRUFBQSxJQUFJLEdBQUE7QUFDRixXQUFPLEtBQVAsS0FBQTtBQUNEOztBQUVELEVBQUEsSUFBSSxHQUFBO0FBQ0YsV0FBTyxLQUFQLEtBQUE7QUFDRDs7QUFFRCxFQUFBLE9BQU8sR0FBQTtBQUNMLFFBQUksR0FBRyxHQUFQLEVBQUE7QUFDQSxTQUFBLFdBQUEsQ0FBaUIsQ0FBQyxJQUFJLEdBQUcsQ0FBSCxJQUFBLENBQXRCLENBQXNCLENBQXRCO0FBQ0EsV0FBQSxHQUFBO0FBQ0Q7O0FBRUQsRUFBQSxRQUFRLENBQUEsSUFBQSxFQUFRO0FBQ2QsUUFBSSxJQUFJLEtBQUssS0FBYixLQUFBLEVBQXlCLE9BQUEsSUFBQTtBQUN6QixXQUFPLElBQUksQ0FBWCxJQUFBO0FBQ0Q7O0FBbkNtQjs7O0FBc0NmLE1BQU0sV0FBVyxHQUFHLElBQUEsU0FBQSxDQUFBLElBQUEsRUFBcEIsSUFBb0IsQ0FBcEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcHRpb24gfSBmcm9tICcuL3BsYXRmb3JtLXV0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBMaW5rZWRMaXN0Tm9kZSB7XG4gIG5leHQ6IE9wdGlvbjxMaW5rZWRMaXN0Tm9kZT47XG4gIHByZXY6IE9wdGlvbjxMaW5rZWRMaXN0Tm9kZT47XG59XG5cbmV4cG9ydCBjbGFzcyBMaXN0Tm9kZTxUPiBpbXBsZW1lbnRzIExpbmtlZExpc3ROb2RlIHtcbiAgcHVibGljIG5leHQ6IE9wdGlvbjxMaXN0Tm9kZTxUPj4gPSBudWxsO1xuICBwdWJsaWMgcHJldjogT3B0aW9uPExpc3ROb2RlPFQ+PiA9IG51bGw7XG4gIHB1YmxpYyB2YWx1ZTogVDtcblxuICBjb25zdHJ1Y3Rvcih2YWx1ZTogVCkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxufVxuXG4vLyB3ZSBhcmUgdW5hYmxlIHRvIGV4cHJlc3MgdGhlIGNvbnN0cmFpbnQgdGhhdCBUJ3MgLnByZXYgYW5kIC5uZXh0IGFyZVxuLy8gdGhlbXNlbHZlcyBULiBIb3dldmVyLCBpdCB3aWxsIGFsd2F5cyBiZSB0cnVlLCBzbyB0cnVzdCB1cy5cbnR5cGUgdHJ1c3QgPSBhbnk7XG5cbmV4cG9ydCBjbGFzcyBMaW5rZWRMaXN0PFQgZXh0ZW5kcyBMaW5rZWRMaXN0Tm9kZT4gaW1wbGVtZW50cyBTbGljZTxUPiB7XG4gIHByaXZhdGUgX2hlYWQhOiBPcHRpb248VD47XG4gIHByaXZhdGUgX3RhaWwhOiBPcHRpb248VD47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jbGVhcigpO1xuICB9XG5cbiAgaGVhZCgpOiBPcHRpb248VD4ge1xuICAgIHJldHVybiB0aGlzLl9oZWFkO1xuICB9XG5cbiAgdGFpbCgpOiBPcHRpb248VD4ge1xuICAgIHJldHVybiB0aGlzLl90YWlsO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5faGVhZCA9IHRoaXMuX3RhaWwgPSBudWxsO1xuICB9XG5cbiAgdG9BcnJheSgpOiBUW10ge1xuICAgIGxldCBvdXQ6IFRbXSA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaE5vZGUobiA9PiBvdXQucHVzaChuKSk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIG5leHROb2RlKG5vZGU6IFQpOiBUIHtcbiAgICByZXR1cm4gbm9kZS5uZXh0IGFzIHRydXN0O1xuICB9XG5cbiAgZm9yRWFjaE5vZGUoY2FsbGJhY2s6IChub2RlOiBUKSA9PiB2b2lkKSB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLl9oZWFkO1xuXG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUgYXMgdHJ1c3QpO1xuICAgICAgbm9kZSA9IG5vZGUubmV4dCBhcyB0cnVzdDtcbiAgICB9XG4gIH1cblxuICBpbnNlcnRCZWZvcmUobm9kZTogVCwgcmVmZXJlbmNlOiBPcHRpb248VD4gPSBudWxsKTogVCB7XG4gICAgaWYgKHJlZmVyZW5jZSA9PT0gbnVsbCkgcmV0dXJuIHRoaXMuYXBwZW5kKG5vZGUpO1xuXG4gICAgaWYgKHJlZmVyZW5jZS5wcmV2KSByZWZlcmVuY2UucHJldi5uZXh0ID0gbm9kZTtcbiAgICBlbHNlIHRoaXMuX2hlYWQgPSBub2RlO1xuXG4gICAgbm9kZS5wcmV2ID0gcmVmZXJlbmNlLnByZXY7XG4gICAgbm9kZS5uZXh0ID0gcmVmZXJlbmNlO1xuICAgIHJlZmVyZW5jZS5wcmV2ID0gbm9kZTtcblxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgYXBwZW5kKG5vZGU6IFQpOiBUIHtcbiAgICBsZXQgdGFpbCA9IHRoaXMuX3RhaWw7XG5cbiAgICBpZiAodGFpbCkge1xuICAgICAgdGFpbC5uZXh0ID0gbm9kZTtcbiAgICAgIG5vZGUucHJldiA9IHRhaWw7XG4gICAgICBub2RlLm5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oZWFkID0gbm9kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuX3RhaWwgPSBub2RlKTtcbiAgfVxuXG4gIHJlbW92ZShub2RlOiBUKTogVCB7XG4gICAgaWYgKG5vZGUucHJldikgbm9kZS5wcmV2Lm5leHQgPSBub2RlLm5leHQ7XG4gICAgZWxzZSB0aGlzLl9oZWFkID0gbm9kZS5uZXh0IGFzIHRydXN0O1xuXG4gICAgaWYgKG5vZGUubmV4dCkgbm9kZS5uZXh0LnByZXYgPSBub2RlLnByZXY7XG4gICAgZWxzZSB0aGlzLl90YWlsID0gbm9kZS5wcmV2IGFzIHRydXN0O1xuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTbGljZTxUIGV4dGVuZHMgTGlua2VkTGlzdE5vZGU+IHtcbiAgaGVhZCgpOiBPcHRpb248VD47XG4gIHRhaWwoKTogT3B0aW9uPFQ+O1xuICBuZXh0Tm9kZShub2RlOiBUKTogT3B0aW9uPFQ+O1xuICBmb3JFYWNoTm9kZShjYWxsYmFjazogKG5vZGU6IFQpID0+IHZvaWQpOiB2b2lkO1xuICB0b0FycmF5KCk6IFRbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDbG9uZWFibGVMaXN0Tm9kZSBleHRlbmRzIExpbmtlZExpc3ROb2RlIHtcbiAgY2xvbmUoKTogdGhpcztcbn1cblxuZXhwb3J0IGNsYXNzIExpc3RTbGljZTxUIGV4dGVuZHMgTGlua2VkTGlzdE5vZGU+IGltcGxlbWVudHMgU2xpY2U8VD4ge1xuICBwcml2YXRlIF9oZWFkOiBPcHRpb248VD47XG4gIHByaXZhdGUgX3RhaWw6IE9wdGlvbjxUPjtcblxuICBjb25zdHJ1Y3RvcihoZWFkOiBPcHRpb248VD4sIHRhaWw6IE9wdGlvbjxUPikge1xuICAgIHRoaXMuX2hlYWQgPSBoZWFkO1xuICAgIHRoaXMuX3RhaWwgPSB0YWlsO1xuICB9XG5cbiAgZm9yRWFjaE5vZGUoY2FsbGJhY2s6IChub2RlOiBUKSA9PiB2b2lkKSB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLl9oZWFkO1xuXG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUpO1xuICAgICAgbm9kZSA9IHRoaXMubmV4dE5vZGUobm9kZSk7XG4gICAgfVxuICB9XG5cbiAgaGVhZCgpOiBPcHRpb248VD4ge1xuICAgIHJldHVybiB0aGlzLl9oZWFkO1xuICB9XG5cbiAgdGFpbCgpOiBPcHRpb248VD4ge1xuICAgIHJldHVybiB0aGlzLl90YWlsO1xuICB9XG5cbiAgdG9BcnJheSgpOiBUW10ge1xuICAgIGxldCBvdXQ6IFRbXSA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaE5vZGUobiA9PiBvdXQucHVzaChuKSk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIG5leHROb2RlKG5vZGU6IFQpOiBPcHRpb248VD4ge1xuICAgIGlmIChub2RlID09PSB0aGlzLl90YWlsKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gbm9kZS5uZXh0IGFzIFQ7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEVNUFRZX1NMSUNFID0gbmV3IExpc3RTbGljZShudWxsLCBudWxsKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=