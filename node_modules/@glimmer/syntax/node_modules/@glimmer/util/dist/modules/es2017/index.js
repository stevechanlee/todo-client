export { EMPTY_ARRAY } from './lib/array-utils';
export { default as assert, deprecate } from './lib/assert';
export { dict, DictSet, isDict, isObject, StackImpl as Stack } from './lib/collections';
export * from './lib/dom';
export { ensureGuid, initializeGuid } from './lib/guid';
export { isSerializationFirstNode, SERIALIZATION_FIRST_NODE_STRING } from './lib/is-serialization-first-node';
export { EMPTY_SLICE, LinkedList, ListNode, ListSlice } from './lib/list-utils';
export { assign, fillNulls, values } from './lib/object-utils';
export * from './lib/platform-utils';
export * from './lib/string';
export * from './lib/immediate';
export * from './lib/template';
export { default as debugToString } from './lib/debug-to-string';
export function assertNever(value, desc = 'unexpected unreachable branch') {
  console.log('unreachable', value);
  console.trace(`${desc} :: ${JSON.stringify(value)} (${value})`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxXQUFULFFBQTRCLG1CQUE1QjtBQUNBLFNBQVMsT0FBTyxJQUFJLE1BQXBCLEVBQTRCLFNBQTVCLFFBQTZDLGNBQTdDO0FBQ0EsU0FBUyxJQUFULEVBQWUsT0FBZixFQUF3QixNQUF4QixFQUFnQyxRQUFoQyxFQUErQyxTQUFTLElBQUksS0FBNUQsUUFBeUUsbUJBQXpFO0FBQ0EsY0FBYyxXQUFkO0FBQ0EsU0FBUyxVQUFULEVBQThCLGNBQTlCLFFBQW9ELFlBQXBEO0FBQ0EsU0FDRSx3QkFERixFQUVFLCtCQUZGLFFBR08sbUNBSFA7QUFJQSxTQUVFLFdBRkYsRUFHRSxVQUhGLEVBS0UsUUFMRixFQU1FLFNBTkYsUUFRTyxrQkFSUDtBQVNBLFNBQVMsTUFBVCxFQUFpQixTQUFqQixFQUE0QixNQUE1QixRQUEwQyxvQkFBMUM7QUFDQSxjQUFjLHNCQUFkO0FBQ0EsY0FBYyxjQUFkO0FBQ0EsY0FBYyxpQkFBZDtBQUNBLGNBQWMsZ0JBQWQ7QUFFQSxTQUFTLE9BQU8sSUFBSSxhQUFwQixRQUF5Qyx1QkFBekM7QUFJQSxPQUFNLFNBQVUsV0FBVixDQUFzQixLQUF0QixFQUFvQyxJQUFJLEdBQUcsK0JBQTNDLEVBQTBFO0FBQzlFLEVBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxhQUFaLEVBQTJCLEtBQTNCO0FBQ0EsRUFBQSxPQUFPLENBQUMsS0FBUixDQUFjLEdBQUcsSUFBSSxPQUFPLElBQUksQ0FBQyxTQUFMLENBQWUsS0FBZixDQUFxQixLQUFLLEtBQUssR0FBM0Q7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEVNUFRZX0FSUkFZIH0gZnJvbSAnLi9saWIvYXJyYXktdXRpbHMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBhc3NlcnQsIGRlcHJlY2F0ZSB9IGZyb20gJy4vbGliL2Fzc2VydCc7XG5leHBvcnQgeyBkaWN0LCBEaWN0U2V0LCBpc0RpY3QsIGlzT2JqZWN0LCBTZXQsIFN0YWNrSW1wbCBhcyBTdGFjayB9IGZyb20gJy4vbGliL2NvbGxlY3Rpb25zJztcbmV4cG9ydCAqIGZyb20gJy4vbGliL2RvbSc7XG5leHBvcnQgeyBlbnN1cmVHdWlkLCBIYXNHdWlkLCBpbml0aWFsaXplR3VpZCB9IGZyb20gJy4vbGliL2d1aWQnO1xuZXhwb3J0IHtcbiAgaXNTZXJpYWxpemF0aW9uRmlyc3ROb2RlLFxuICBTRVJJQUxJWkFUSU9OX0ZJUlNUX05PREVfU1RSSU5HLFxufSBmcm9tICcuL2xpYi9pcy1zZXJpYWxpemF0aW9uLWZpcnN0LW5vZGUnO1xuZXhwb3J0IHtcbiAgQ2xvbmVhYmxlTGlzdE5vZGUsXG4gIEVNUFRZX1NMSUNFLFxuICBMaW5rZWRMaXN0LFxuICBMaW5rZWRMaXN0Tm9kZSxcbiAgTGlzdE5vZGUsXG4gIExpc3RTbGljZSxcbiAgU2xpY2UsXG59IGZyb20gJy4vbGliL2xpc3QtdXRpbHMnO1xuZXhwb3J0IHsgYXNzaWduLCBmaWxsTnVsbHMsIHZhbHVlcyB9IGZyb20gJy4vbGliL29iamVjdC11dGlscyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9wbGF0Zm9ybS11dGlscyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9zdHJpbmcnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvaW1tZWRpYXRlJztcbmV4cG9ydCAqIGZyb20gJy4vbGliL3RlbXBsYXRlJztcblxuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZWJ1Z1RvU3RyaW5nIH0gZnJvbSAnLi9saWIvZGVidWctdG8tc3RyaW5nJztcblxuZXhwb3J0IHR5cGUgRklYTUU8VCwgUyBleHRlbmRzIHN0cmluZz4gPSAoVCAmIFMpIHwgVDtcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE5ldmVyKHZhbHVlOiBuZXZlciwgZGVzYyA9ICd1bmV4cGVjdGVkIHVucmVhY2hhYmxlIGJyYW5jaCcpOiB2b2lkIHtcbiAgY29uc29sZS5sb2coJ3VucmVhY2hhYmxlJywgdmFsdWUpO1xuICBjb25zb2xlLnRyYWNlKGAke2Rlc2N9IDo6ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfSAoJHt2YWx1ZX0pYCk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9